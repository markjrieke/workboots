[{"path":"https://markjrieke.github.io/workboots/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Mark Rieke Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://markjrieke.github.io/workboots/articles/Getting-Started-with-workboots.html","id":"building-a-baseline-model","dir":"Articles","previous_headings":"","what":"Building a baseline model","title":"Getting Started with workboots","text":"’s included car_prices dataset? car_prices dataset already well set-modeling — ’ll apply bit light preprocessing training boosted tree model predict price. ’ll save test data end use validation split evaluate first model. XGBoost model default parameters perform dataset? can also plot predictions actual prices see baseline model performs.  can extract bit extra performance tuning model parameters — also needed want stray default parameters predicting ranges workboots package.","code":"library(tidymodels)  # setup data  data(\"car_prices\") car_prices  #> # A tibble: 804 × 18 #>     Price Mileage Cylinder Doors Cruise Sound Leather Buick Cadillac Chevy #>     <dbl>   <int>    <int> <int>  <int> <int>   <int> <int>    <int> <int> #>  1 22661.   20105        6     4      1     0       0     1        0     0 #>  2 21725.   13457        6     2      1     1       0     0        0     1 #>  3 29143.   31655        4     2      1     1       1     0        0     0 #>  4 30732.   22479        4     2      1     0       0     0        0     0 #>  5 33359.   17590        4     2      1     1       1     0        0     0 #>  6 30315.   23635        4     2      1     0       0     0        0     0 #>  7 33382.   17381        4     2      1     1       1     0        0     0 #>  8 30251.   27558        4     2      1     0       1     0        0     0 #>  9 30167.   25049        4     2      1     0       0     0        0     0 #> 10 27060.   17319        4     4      1     0       1     0        0     0 #> # … with 794 more rows, and 8 more variables: Pontiac <int>, Saab <int>, #> #   Saturn <int>, convertible <int>, coupe <int>, hatchback <int>, sedan <int>, #> #   wagon <int> # apply global transfomations car_prices <-   car_prices %>%   mutate(Price = log10(Price),          Cylinder = as.character(Cylinder),          Doors = as.character(Doors))  # split into testing and training set.seed(999) car_split <- initial_split(car_prices) car_train <- training(car_split) car_test <- testing(car_split) set.seed(888) car_val_split <- initial_split(car_train) car_val_train <- training(car_val_split) car_val_test <- testing(car_val_split) car_val_rec <-   recipe(Price ~ ., data = car_val_train) %>%   step_BoxCox(Mileage) %>%   step_dummy(all_nominal())  # fit and predict on our validation set set.seed(777) car_val_preds <-    workflow() %>%   add_recipe(car_val_rec) %>%   add_model(boost_tree(\"regression\", engine = \"xgboost\")) %>%   fit(car_val_train) %>%   predict(car_val_test) %>%   bind_cols(car_val_test)  car_val_preds %>%   rmse(truth = Price, estimate = .pred) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rmse    standard      0.0483 car_val_preds %>%   ggplot(aes(x = Price, y = .pred)) +   geom_point(size = 2, alpha = 0.25) +   geom_abline(linetype = \"dashed\")"},{"path":"https://markjrieke.github.io/workboots/articles/Getting-Started-with-workboots.html","id":"tuning-model-parameters","dir":"Articles","previous_headings":"","what":"Tuning model parameters","title":"Getting Started with workboots","text":"Boosted tree models lot available tuning parameters — given relatively small dataset, ’ll just focus mtry trees parameters. Tuning gives us slightly better performance baseline model: Now can finalize workflow best tuning parameters. finalized workflow, can start predicting intervals workboots!","code":"# re-setup recipe with training dataset car_rec <-    recipe(Price ~ ., data = car_train) %>%   step_BoxCox(Mileage) %>%   step_dummy(all_nominal())  # setup model spec  car_spec <-   boost_tree(     mode = \"regression\",     engine = \"xgboost\",     mtry = tune(),     trees = tune()   )  # combine into workflow car_wf <-   workflow() %>%   add_recipe(car_rec) %>%   add_model(car_spec)  # setup cross-validation folds set.seed(666) car_folds <- vfold_cv(car_train)  # tune model set.seed(555) car_tune <-   tune_grid(     car_wf,     car_folds,     grid = 5   ) car_tune %>%   show_best(\"rmse\") #> # A tibble: 5 × 8 #>    mtry trees .metric .estimator   mean     n std_err .config              #>   <int> <int> <chr>   <chr>       <dbl> <int>   <dbl> <chr>                #> 1     5  1545 rmse    standard   0.0446    10 0.00250 Preprocessor1_Model2 #> 2    12  1676 rmse    standard   0.0452    10 0.00241 Preprocessor1_Model4 #> 3     4   434 rmse    standard   0.0453    10 0.00247 Preprocessor1_Model1 #> 4    11   271 rmse    standard   0.0458    10 0.00241 Preprocessor1_Model3 #> 5    18  1158 rmse    standard   0.0468    10 0.00243 Preprocessor1_Model5 car_wf_final <-   car_wf %>%   finalize_workflow(car_tune %>% select_best(\"rmse\"))  car_wf_final #> ══ Workflow ════════════════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: boost_tree() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 2 Recipe Steps #>  #> • step_BoxCox() #> • step_dummy() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> Boosted Tree Model Specification (regression) #>  #> Main Arguments: #>   mtry = 5 #>   trees = 1545 #>  #> Computational engine: xgboost"},{"path":"https://markjrieke.github.io/workboots/articles/Getting-Started-with-workboots.html","id":"predicting-price-ranges","dir":"Articles","previous_headings":"","what":"Predicting price ranges","title":"Getting Started with workboots","text":"generate prediction interval car’s price, can pass finalized workflow predict_boots(). can summarize predictions upper lower bounds prediction interval passing car_preds summarise_predictions(). predictions compare actual values?","code":"library(workboots)  set.seed(444) car_preds <-   car_wf_final %>%   predict_boots(     n = 2000,     training_data = car_train,     new_data = car_test   ) car_preds %>%   summarise_predictions() #> # A tibble: 201 × 5 #>    rowid .preds               .pred .pred_lower .pred_upper #>    <int> <list>               <dbl>       <dbl>       <dbl> #>  1     1 <tibble [2,000 × 2]>  4.30        4.22        4.38 #>  2     2 <tibble [2,000 × 2]>  4.48        4.41        4.55 #>  3     3 <tibble [2,000 × 2]>  4.51        4.44        4.58 #>  4     4 <tibble [2,000 × 2]>  4.44        4.37        4.51 #>  5     5 <tibble [2,000 × 2]>  4.46        4.38        4.53 #>  6     6 <tibble [2,000 × 2]>  4.50        4.41        4.57 #>  7     7 <tibble [2,000 × 2]>  4.52        4.44        4.59 #>  8     8 <tibble [2,000 × 2]>  4.52        4.45        4.59 #>  9     9 <tibble [2,000 × 2]>  4.46        4.38        4.53 #> 10    10 <tibble [2,000 × 2]>  4.46        4.38        4.53 #> # … with 191 more rows car_preds %>%   summarise_predictions() %>%   bind_cols(car_test) %>%   ggplot(aes(x = Price,               y = .pred,              ymin = .pred_lower,              ymax = .pred_upper)) +   geom_point(size = 2,              alpha = 0.25) +   geom_errorbar(alpha = 0.25,                 width = 0.0125) +   geom_abline(linetype = \"dashed\",               color = \"gray\")"},{"path":"https://markjrieke.github.io/workboots/articles/Getting-Started-with-workboots.html","id":"estimating-variable-importance","dir":"Articles","previous_headings":"","what":"Estimating variable importance","title":"Getting Started with workboots","text":"workboots, can also estimate variable importance passing finalized workflow vi_boots(). uses vip::vi() hood, doesn’t support model types available tidymodels — please refer vip’s package documentation full list supported models. Similar predictions, can summarise variable’s importance passing car_importance function summarise_importance() plot results.","code":"set.seed(333) car_importance <-   car_wf_final %>%   vi_boots(     n = 2000,     trainng_data = car_train   ) car_importance %>%   summarise_importance() %>%   mutate(variable = forcats::fct_reorder(variable, .importance)) %>%   ggplot(aes(x = variable,              y = .importance,              ymin = .importance_lower,              ymax = .importance_upper)) +   geom_point(size = 2) +   geom_errorbar() +   coord_flip()"},{"path":"https://markjrieke.github.io/workboots/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Rieke. Author, maintainer.","code":""},{"path":"https://markjrieke.github.io/workboots/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rieke M (2022). workboots: Generate Bootstrap Prediction Intervals 'tidymodels' Workflow. https://github.com/markjrieke/workboots, https://markjrieke.github.io/workboots/.","code":"@Manual{,   title = {workboots: Generate Bootstrap Prediction Intervals from a 'tidymodels' Workflow},   author = {Mark Rieke},   year = {2022},   note = {https://github.com/markjrieke/workboots, https://markjrieke.github.io/workboots/}, }"},{"path":"https://markjrieke.github.io/workboots/index.html","id":"workboots-","dir":"","previous_headings":"","what":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","title":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","text":"Author: Mark Rieke License: MIT","code":""},{"path":"https://markjrieke.github.io/workboots/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","text":"workboots tidy method generating bootstrap prediction intervals arbitrary model types tidymodel workflow. using bootstrap resampling, can create many models — one resample. model slightly different based resample trained . model also generate slightly different predictions new data, allowing us generate prediction distribution models otherwise just return point predictions.","code":""},{"path":"https://markjrieke.github.io/workboots/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","text":"can install released version workboots CRAN development version github devtools remotes package:","code":"# install from CRAN install.packages(\"workboots\")  # or the development version devtools::install_github(\"markjrieke/workboots\")"},{"path":"https://markjrieke.github.io/workboots/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","text":"workboots builds top tidymodels suite packages. Teaching use tidymodels beyond scope package, helpful resources linked bottom README. get started, ’ll need create workflow. Boosted tree models can generate point predictions, workboots can generate prediction interval observation penguins_test passing workflow predict_boots(): Alternatively, can generate confidence interval around prediction setting parameter interval \"confidence\":","code":"library(tidymodels)  # load our dataset data(\"penguins\") penguins <- penguins %>% drop_na()  # split data into testing & training sets set.seed(123) penguins_split <- initial_split(penguins) penguins_test <- testing(penguins_split) penguins_train <- training(penguins_split)  # create a workflow penguins_wf <-    workflow() %>%   add_recipe(recipe(body_mass_g ~ ., data = penguins_train) %>% step_dummy(all_nominal())) %>%   add_model(boost_tree(\"regression\")) library(workboots)  # generate predictions from 2000 bootstrap models set.seed(345) penguins_pred_int <-   penguins_wf %>%   predict_boots(     n = 2000,     training_data = penguins_train,     new_data = penguins_test   )  # summarise predictions with a 95% prediction interval pengins_pred_int %>%   summarise_predictions() #> # A tibble: 84 x 5 #>    rowid .preds               .pred .pred_lower .pred_upper #>    <int> <list>               <dbl>       <dbl>       <dbl> #>  1     1 <tibble [2,000 x 2]> 3465.       2913.       3994. #>  2     2 <tibble [2,000 x 2]> 3535.       2982.       4100. #>  3     3 <tibble [2,000 x 2]> 3604.       3050.       4187. #>  4     4 <tibble [2,000 x 2]> 4157.       3477.       4764. #>  5     5 <tibble [2,000 x 2]> 3868.       3305.       4372. #>  6     6 <tibble [2,000 x 2]> 3519.       2996.       4078. #>  7     7 <tibble [2,000 x 2]> 3435.       2914.       3954. #>  8     8 <tibble [2,000 x 2]> 4072.       3483.       4653. #>  9     9 <tibble [2,000 x 2]> 3445.       2926.       3966. #> 10    10 <tibble [2,000 x 2]> 3405.       2876.       3938. #> # ... with 74 more rows # generate predictions from 2000 bootstrap models set.seed(456) penguins_conf_int <-    penguins_wf %>%   predict_boots(     n = 2000,     training_data = penguins_train,     new_data = penguins_test,     interval = \"confidence\"   )  # summarise with a 95% confidence interval penguins_conf_int %>%   summarise_predictions() #> # A tibble: 84 x 5 #>    rowid .preds               .pred .pred_lower .pred_upper #>    <int> <list>               <dbl>       <dbl>       <dbl> #>  1     1 <tibble [2,000 x 2]> 3466.       3257.       3635. #>  2     2 <tibble [2,000 x 2]> 3534.       3291.       3811. #>  3     3 <tibble [2,000 x 2]> 3623.       3306.       3921. #>  4     4 <tibble [2,000 x 2]> 4155.       3722.       4504. #>  5     5 <tibble [2,000 x 2]> 3868.       3644.       4086. #>  6     6 <tibble [2,000 x 2]> 3509.       3286.       3768. #>  7     7 <tibble [2,000 x 2]> 3439.       3249.       3624. #>  8     8 <tibble [2,000 x 2]> 4064.       3737.       4369. #>  9     9 <tibble [2,000 x 2]> 3450.       3253.       3635. #> 10    10 <tibble [2,000 x 2]> 3405.       3222.       3651. #> # ... with 74 more rows"},{"path":"https://markjrieke.github.io/workboots/index.html","id":"bug-reportsfeature-requests","dir":"","previous_headings":"","what":"Bug reports/feature requests","title":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","text":"notice bug, want request new feature, recommendations improving documentation, please open issue repository.","code":""},{"path":"https://markjrieke.github.io/workboots/index.html","id":"tidymodels-resources","dir":"","previous_headings":"Bug reports/feature requests","what":"Tidymodels Resources","title":"Generate Bootstrap Prediction Intervals from a tidymodels Workflow","text":"Getting started Tidymodels Tidy Modeling R Julia Silge’s Blog provides use cases tidymodels weekly #tidytuesday datasets.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/predict_boots.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","title":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","text":"Generate prediction interval arbitrary model types using bootstrap resampling. predict_boots() generates n bootstrap resamples, fits model resample (creating n models), creates n predictions observation new_data.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/predict_boots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","text":"","code":"predict_boots(   workflow,   n = 2000,   training_data,   new_data,   interval = c(\"prediction\", \"confidence\"),   verbose = FALSE,   ... )"},{"path":"https://markjrieke.github.io/workboots/reference/predict_boots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","text":"workflow un-fitted workflow object. n integer number bootstrap resampled models created. training_data tibble dataframe data resampled used training. new_data tibble dataframe used make predictions. interval One prediction, confidence. Specifies interval type generated. verbose logical. Defaults FALSE. set TRUE, prints progress training console. ... Additional params passed rsample::bootstraps().","code":""},{"path":"https://markjrieke.github.io/workboots/reference/predict_boots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","text":"tibble column indicating row index observation new_data nested list model predictions observation.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/predict_boots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","text":"Since predict_boots() fits new model resample, argument workflow must yet fit. tuned hyperparameters must finalized prior calling predict_boots().","code":""},{"path":"https://markjrieke.github.io/workboots/reference/predict_boots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and predict from a workflow using many bootstrap resamples. — predict_boots","text":"","code":"if (FALSE) { library(tidymodels)  # setup a workflow without fitting wf <-   workflow() %>%   add_recipe(recipe(qsec ~ wt, data = mtcars)) %>%   add_model(linear_reg())  # fit and predict 2000 bootstrap resampled models to mtcars set.seed(123) wf %>%   predict_boots(n = 2000, training_data = mtcars, new_data = mtcars) }"},{"path":"https://markjrieke.github.io/workboots/reference/summarise_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a tibble of variable importances returned by vi_boots() with upper\nand lower bounds. — summarise_importance","title":"Append a tibble of variable importances returned by vi_boots() with upper\nand lower bounds. — summarise_importance","text":"Append tibble variable importances returned vi_boots() upper lower bounds.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a tibble of variable importances returned by vi_boots() with upper\nand lower bounds. — summarise_importance","text":"","code":"summarise_importance(.data, interval_width = 0.95, conf = NULL)  summarize_importance(.data, interval_width = 0.95, conf = NULL)"},{"path":"https://markjrieke.github.io/workboots/reference/summarise_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a tibble of variable importances returned by vi_boots() with upper\nand lower bounds. — summarise_importance","text":".data tibble variable importances returned vi_boots(). interval_width value (0, 1) specifying interval range. conf deprecated - please use interval_width instead.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_importance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append a tibble of variable importances returned by vi_boots() with upper\nand lower bounds. — summarise_importance","text":"Generates summary variable importances upper lower interval range. Uses vi() function {vip} package compute variable importances (model types supported vip::vi(); please refer {vip} package documentation supported model types). Presently, quantile() function {stats} package used determine lower, 50th percentile, upper interval ranges.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_importance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a tibble of variable importances returned by vi_boots() with upper\nand lower bounds. — summarise_importance","text":"","code":"if (FALSE) { library(tidymodels)  # setup a workflow without fitting wf <-   workflow() %>%   add_recipe(recipe(qsec ~ wt, data = mtcars)) %>%   add_model(linear_reg())  # evaluate variable importance from 2000 models fit to mtcars set.seed(123) importances <-   wf %>%   vi_boots(n = 2000, training_data = mtcars, new_data = mtcars)  # append with lower and upper bound importance summary columns importances %>%   summarise_importance(interval_width = 0.95) }"},{"path":"https://markjrieke.github.io/workboots/reference/summarise_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","title":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","text":"Append tibble predictions returned predict_boots() upper lower bounds.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","text":"","code":"summarise_predictions(.data, interval_width = 0.95, conf = NULL)  summarize_predictions(.data, interval_width = 0.95, conf = NULL)"},{"path":"https://markjrieke.github.io/workboots/reference/summarise_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","text":".data tibble predictions returned predict_boots(). interval_width value (0, 1) specifying interval range. conf deprecated - please use interval_width instead.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","text":"Appends tibble predictions returned predict_boots() three new columns: .pred_lower, .pred, .pred_upper.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","text":"Generates summary predictions upper lower interval range. Presently, quantile() function {stats} package used determine lower, 50th percentile, upper interval ranges.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/summarise_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a tibble of predictions returned by predict_boots() with upper and\nlower bounds. — summarise_predictions","text":"","code":"if (FALSE) { library(tidymodels)  # setup a workflow without fitting wf <-   workflow() %>%   add_recipe(recipe(qsec ~ wt, data = mtcars)) %>%   add_model(linear_reg())  # fit and predict 2000 bootstrap resampled models to mtcars set.seed(123) preds <-   wf %>%   predict_boots(n = 2000, training_data = mtcars, new_data = mtcars)  # append with prediction interval summary columns preds %>%   summarise_predictions(conf = 0.95) }"},{"path":"https://markjrieke.github.io/workboots/reference/vi_boots.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","title":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","text":"Generate variable importances tidymodel workflow using bootstrap resampling. vi_boots() generates n bootstrap resamples, fits model (creating n models), creates n estimates variable importance variable model.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/vi_boots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","text":"","code":"vi_boots(workflow, n = 2000, training_data, verbose = FALSE, ...)"},{"path":"https://markjrieke.github.io/workboots/reference/vi_boots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","text":"workflow un-fitted workflow object. n integer number bootstrap resampled models created. training_data tibble dataframe data resampled used training. verbose logical. Defaults FALSE. set TRUE, prints progress training console. ... Additional params passed rsample::bootstraps().","code":""},{"path":"https://markjrieke.github.io/workboots/reference/vi_boots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","text":"tibble column indicating variable model nested list variable importances variable. shape list may vary model type. example, linear models return two nested columns: absolute value variable's importance sign (POS/NEG), whereas tree-based models return single nested column variable importance. Similarly, number nested rows may vary model type models may utilize every possible predictor.","code":""},{"path":"https://markjrieke.github.io/workboots/reference/vi_boots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","text":"Since vi_boots() fits new model resample, argument workflow must yet fit. tuned hyperparameters must finalized prior calling vi_boots().","code":""},{"path":"https://markjrieke.github.io/workboots/reference/vi_boots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit and estimate variable importance from a workflow using many bootstrap resamples. — vi_boots","text":"","code":"if (FALSE) { library(tidymodels)  # setup a workflow without fitting wf <-   workflow() %>%   add_recipe(recipe(qsec ~ wt, data = mtcars)) %>%   add_model(linear_reg())  # fit and estimate variable importance from 125 bootstrap resampled models set.seed(123) wf %>%   vi_boots(n = 2000, training_data = mtcars) }"},{"path":[]},{"path":"https://markjrieke.github.io/workboots/news/index.html","id":"function-updates-0-2-0","dir":"Changelog","previous_headings":"","what":"Function updates","title":"workboots 0.2.0","text":"Rearranged column order output summarise_* functions *_lower, *, *_upper *, *_lower, *_upper Deprecated conf parameter summarise_* functions favor interval_width. Added support generating confidence intervals predict_boots().","code":""},{"path":"https://markjrieke.github.io/workboots/news/index.html","id":"workboots-011","dir":"Changelog","previous_headings":"","what":"workboots 0.1.1","title":"workboots 0.1.1","text":"CRAN release: 2022-04-11","code":""},{"path":"https://markjrieke.github.io/workboots/news/index.html","id":"function-updates-0-1-1","dir":"Changelog","previous_headings":"","what":"Function updates","title":"workboots 0.1.1","text":"updated function generate prediction interval (previously generating prediction’s confidence interval) updated default setting assume residuals normally distributed updated default number resamples updated function draw residuals based 632+ rule (previously using training residuals) updated default number resamples vi_boots() added param verbose predict_boots() vi_boots() display progress console. added new function summarise_importance(), well alias summarize_* summarise_*","code":""},{"path":"https://markjrieke.github.io/workboots/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"workboots 0.1.1","text":"Fixed bug assert_pred_data() caused workflows rejected predict_boots()","code":""},{"path":"https://markjrieke.github.io/workboots/news/index.html","id":"workboots-010","dir":"Changelog","previous_headings":"","what":"workboots 0.1.0","title":"workboots 0.1.0","text":"CRAN release: 2022-03-09 Initial release predict_boots() generating bootstrap prediction intervals tidymodel workflows. summarise_predictions() summarizing bootstrap predictions expected, lower bound, upper bound values. vi_boots() generating bootstrap feature importance tidymodel workflows. Vignette Getting Started workboots. Unit testing core functions (via testthat).","code":""}]
